# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Set up MySQL database
      uses: joshuaavalon/setup-mysql@v1
      with:
        mysql-version: '8.0'
        root-password: ${{ secrets.MYSQL_ROOT_PASSWORD }}  
    
    - name: Test with Hibernate and MySQL
      run: mvn test --file pom.xml
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/hallmeal
        SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}

    - name: Save artifacts
      uses: actions/upload-artifact@v2
      with:
        name: webapp
        path: target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: 1.8

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: webapp
        path: target

    - name: Deploy to Tomcat
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.TOMCAT_HOST }}
        username: ${{ secrets.TOMCAT_USERNAME }}
        password: ${{ secrets.TOMCAT_PASSWORD }}
        port: ${{ secrets.TOMCAT_PORT }}
        script: |
          cd webapps
          rm -rf ROOT*
          cp ../target/*.war ROOT.war

